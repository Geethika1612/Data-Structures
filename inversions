#include <stdio.h>
#include <stdlib.h>
long long mergeInversions(int arr[], int temp[], int
left, int mid, int right) {
int i = left;
int j = mid + 1;
int k = left;
long long inversions = 0;
while (i <= mid && j <= right) {
if (arr[i] <= arr[j]) {
temp[k++] = arr[i++];
} else {
temp[k++] = arr[j++];
inversions += (long long)(mid - i + 1);
}
}
while (i <= mid) {
temp[k++] = arr[i++];
}
while (j <= right) {

temp[k++] = arr[j++];
}
for (i = left; i <= right; i++) {
arr[i] = temp[i];
}
return inversions;
}
long long mergeInversions(int arr[], int temp[], int
left, int right) {
long long inversions = 0;
if (left < right) {
int mid = left + (right - left) / 2;
inversions += mergeSortAndCountInversions(arr,
temp, left, mid);
inversions += mergeSortAndCountInversions(arr,
temp, mid + 1, right);
inversions += mergeAndCountInversions(arr,
temp, left, mid, right);
}
return inversions;
}
long long countInversions(int arr[], int n) {
int *temp = (int *)malloc(sizeof(int) * n);

long long inversions = mergeInversions(arr, temp,
0, n - 1);
free(temp);
return inversions;
}
int main() {
int n;
printf("Enter the number of elements in the array:
");
scanf("%d", &n);
int arr[n];
printf("Enter the elements of the array: ");
for (int i = 0; i < n; i++) {
scanf("%d", &arr[i]);
}
long long inversions = countInversions(arr, n);
printf("Number of inversions in the array: %lld\n",
inversions);
return 0;
}
