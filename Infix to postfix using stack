#include <stdio.h>
#include <stdlib.h> 
#include <ctype.h> 
#include <string.h>

#define SIZE 100


char stack[SIZE];
int top = -1;



void push(char item)
{
    if (top >= SIZE - 1) {
        printf("\nStack Overflow.");
    }
    else {
        top = top + 1;
        stack[top] = item;
    }
}


char pop()
{
    char item;

    if (top < 0) {
        printf("stack under flow: invalid infix expression");
        getchar();
        
        exit(1);
    }
    else {
        item = stack[top];
        top = top - 1;
        return (item);
    }
}
 



int precedence(char symbol)
{
    if (symbol == '^') 
    {
        return (3);
    }
    else if (symbol == '/' || symbol == '*') {
        return (2);
    }
    else if (symbol == '+' || symbol == '-') 
    {
        return (1);
    }
    else {
        return (0);
    }
}
int is_operator(char symbol)
{
    if (symbol == '^' || symbol == '/' || symbol == '*' || symbol == '+' || symbol == '-') {
        return 1;
    }
    else {
        return 0;
    }
}


void InfixToPostfix(char infix_exp[], char postfix_exp[])
{
    int a, b;
    char key;
    char x;

    push('('); 
    strcat(infix_exp, ")"); 

    a = 0;
    b = 0;
    key = infix_exp[a]; 

    while (key != '\0') 
    {
        if (key == '(') {
            push(key);
        }
        else if (isdigit(key) || isalpha(key)) {
            postfix_exp[b] = key; 
            b++;
        }
        else if (is_operator(key) == 1) 
        {
            x = pop();
            while (is_operator(x) == 1 && precedence(x) >= precedence(key)) {
                postfix_exp[b] = x; 
                b++;
                x = pop(); 
            }
            push(x);
        

            push(key); 
        }
        else if (key == ')') 
        {
            x = pop(); 
            while (x != '(') 
            {
                postfix_exp[b] = x;
                b++;
                x = pop();
            }
        }
        else { 
            printf("\nInvalid infix Expression.\n");
            getchar();
            exit(1);
        }
        a++;

        key = infix_exp[a];
    } 
    if (top > 0) {
        printf("\nInvalid infix Expression.\n"); 
        getchar();
        exit(1);
    }
    if (top > 0) {
        printf("\nInvalid infix Expression.\n"); 
        getchar();
        exit(1);
    }

    postfix_exp[b] = '\0';
}


int main()
{
    char infix[SIZE], postfix[SIZE]; 
    printf("\nEnter Infix expression : ");
    gets(infix);

    InfixToPostfix(infix, postfix); 
    printf("Postfix Expression: ");
    puts(postfix); 

    return 0;
}
